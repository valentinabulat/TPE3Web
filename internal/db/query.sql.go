// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createProducto = `-- name: CreateProducto :one
WITH nuevo_producto AS (
  INSERT INTO producto (titulo, descripcion)
  VALUES ($1, $2)
  RETURNING ID
)
INSERT INTO lista_productos (ID_producto, cantidad)
SELECT ID, $3
FROM nuevo_producto
RETURNING id, id_producto, cantidad, comprado
`

type CreateProductoParams struct {
	Titulo      string
	Descripcion string
	Cantidad    int32
}

func (q *Queries) CreateProducto(ctx context.Context, arg CreateProductoParams) (ListaProducto, error) {
	row := q.db.QueryRowContext(ctx, createProducto, arg.Titulo, arg.Descripcion, arg.Cantidad)
	var i ListaProducto
	err := row.Scan(
		&i.ID,
		&i.IDProducto,
		&i.Cantidad,
		&i.Comprado,
	)
	return i, err
}

const deleteProducto = `-- name: DeleteProducto :execresult
DELETE FROM lista_productos
WHERE ID = $1
`

func (q *Queries) DeleteProducto(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteProducto, id)
}

const getProducto = `-- name: GetProducto :one
SELECT p.ID, p.titulo, p.descripcion, l.cantidad, l.comprado
FROM lista_productos l 
JOIN producto p ON (l.ID_producto = p.ID)
WHERE l.ID = $1
`

type GetProductoRow struct {
	ID          int32
	Titulo      string
	Descripcion string
	Cantidad    int32
	Comprado    sql.NullBool
}

func (q *Queries) GetProducto(ctx context.Context, id int32) (GetProductoRow, error) {
	row := q.db.QueryRowContext(ctx, getProducto, id)
	var i GetProductoRow
	err := row.Scan(
		&i.ID,
		&i.Titulo,
		&i.Descripcion,
		&i.Cantidad,
		&i.Comprado,
	)
	return i, err
}

const listProductos = `-- name: ListProductos :many
SELECT p.ID, p.titulo, p.descripcion, l.cantidad, l.comprado
FROM lista_productos l 
JOIN producto p ON (p.ID=l.ID_producto)
ORDER BY l.ID
`

type ListProductosRow struct {
	ID          int32
	Titulo      string
	Descripcion string
	Cantidad    int32
	Comprado    sql.NullBool
}

func (q *Queries) ListProductos(ctx context.Context) ([]ListProductosRow, error) {
	rows, err := q.db.QueryContext(ctx, listProductos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductosRow
	for rows.Next() {
		var i ListProductosRow
		if err := rows.Scan(
			&i.ID,
			&i.Titulo,
			&i.Descripcion,
			&i.Cantidad,
			&i.Comprado,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProducto = `-- name: UpdateProducto :one
UPDATE lista_productos
SET comprado = true
FROM producto p
WHERE 
    lista_productos.ID_producto = p.ID AND 
    lista_productos.ID = $1
RETURNING p.ID, p.titulo, p.descripcion, lista_productos.cantidad, lista_productos.comprado
`

type UpdateProductoRow struct {
	ID          int32
	Titulo      string
	Descripcion string
	Cantidad    int32
	Comprado    sql.NullBool
}

func (q *Queries) UpdateProducto(ctx context.Context, id int32) (UpdateProductoRow, error) {
	row := q.db.QueryRowContext(ctx, updateProducto, id)
	var i UpdateProductoRow
	err := row.Scan(
		&i.ID,
		&i.Titulo,
		&i.Descripcion,
		&i.Cantidad,
		&i.Comprado,
	)
	return i, err
}
